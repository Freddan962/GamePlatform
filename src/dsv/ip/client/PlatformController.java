package dsv.ip.client;

import dsv.ip.client.handlers.GameHandler;
import dsv.ip.client.handlers.FriendHandler;
import dsv.ip.client.handlers.MessageHandler;
import dsv.ip.client.handlers.SettingStore;
import dsv.ip.client.rmi.ActivityFeedManager;
import dsv.ip.client.rmi.MailManager;
import dsv.ip.client.rmi.UserManager;
import dsv.ip.server.mail.Mail;
import dsv.ip.shared.Event;
import dsv.ip.shared.EventObserver;
import dsv.ip.shared.EventSystem;
import dsv.ip.shared.TimeHelper;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;

import java.net.URL;
import java.util.List;
import java.util.ResourceBundle;

/**
 * @author Fredrik Sander
 * Partially auto-generated by Intellij's UI JavaFX designer.
 *
 * PlatformController is responsible for controlling the interaction with the Platform UI.
 */
public class PlatformController implements Initializable, EventObserver {

  @FXML
  public ListView onlineFriendList;
  @FXML
  public Label cityCountryLabel;
  @FXML
  public Label nameLabel;
  @FXML
  public Label settingsNameLabel;
  @FXML
  public TextField googleEmailAddressField;
  @FXML
  public PasswordField googleEmailPasswordField;
  @FXML
  public ListView receivedMessages;
  @FXML
  public ListView userSearchResult;
  @FXML
  public TextField nameFilterField;
  @FXML
  public Label homeLastUpdated;
  @FXML
  public Label lastUpdatedMessage;
  @FXML
  public TextArea activityMessages;
  @FXML
  public TextArea shareWithPlatformMessage;
  @FXML
  public Label charactersLeftShare;

  private SettingStore settings = new SettingStore();

  /**
   * Initializes the platform's required entities.
   */
  @Override
  public void initialize(URL url, ResourceBundle resourceBundle) {
    prepareUIElements();

    MailManager.getInstance().updateIncoming(receivedMessages, googleEmailAddressField, googleEmailPasswordField);
    UserManager.getInstance().updateOnlineFriends(onlineFriendList);
    ActivityFeedManager.getInstance().updateMessages(activityMessages);
    GameHandler.getInstance().startCheckingForChallenges();

    EventSystem.getInstance().register(Event.ON_INCOMING_MESSAGES_UPDATED, this);
    EventSystem.getInstance().register(Event.ON_ONLINE_FRIENDLIST_UPDATED, this);
  }

  /**
   * Sets the name of the name label on the home view.
   * @param name
   */
  public void setName(String name) {
    name = name.substring(0, 1).toUpperCase() + name.substring(1);
    nameLabel.setText(name);
    settingsNameLabel.setText(name);
  }

  /**
   * Called when the user has selected to challenge a friend from his/hers online friend list.
   * @param actionEvent The actionEvent that contains information regarding the event.
   */
  @FXML
  public void onChallengeToGame(ActionEvent actionEvent) {
    GameHandler.getInstance().challenge(onlineFriendList);
  }

  /**
   * Called when the user selects to remove a friend from the online friend list.
   * @param actionEvent The actionEvent that contains information regarding the event.
   */
  @FXML
  public void onRemoveFriend(ActionEvent actionEvent) {
    FriendHandler handler = new FriendHandler();
    String userToRemove = (String)onlineFriendList.getSelectionModel().getSelectedItem();
    handler.promptRemoveFriend(onlineFriendList, userToRemove);
  }

  /**
   * Called when the user chooses to send a message to another user.
   * @param actionEvent The actionEvent that contains information regarding the event.
   */
  @FXML
  public void onSendMessage(ActionEvent actionEvent) {
    MessageHandler handler = new MessageHandler(MailManager.getInstance());
    handler.setRecipient((String)onlineFriendList.getSelectionModel().getSelectedItem());
    handler.sendMessageDialogue();
  }

  /**
   * Called when the user chooses to save his settings on the settings tab.
   * @param actionEvent The actionEvent that contains information regarding the event.
   */
  @FXML
  public void onSaveSettings(ActionEvent actionEvent) {
    settings.put("googleEmailAddress", googleEmailAddressField.getText());
    settings.put("googleEmailPassword", googleEmailPasswordField.getText());
    settings.save();
    MailManager.getInstance().saveEmail(Session.getInstance().getUsername(), (String)settings.get("googleEmailAddress"));
  }

  /**
   * Called when the user chooses to open a message on the message tab.
   * @param event The ActionEvent that contains information regarding the event.
   */
  @FXML
  public void onOpenMessage(ActionEvent event) {
    Mail mail = MailManager.getInstance().getMail(receivedMessages.getSelectionModel().getSelectedIndex());
    if (mail == null) return;

    Alert alert = new Alert(Alert.AlertType.INFORMATION);
    alert.setTitle(mail.getSubject());
    alert.setHeaderText(mail.getContent());
    alert.show();
  }

  /**
   * Called when the user chooses to hide a message on the message tab.
   * @param event The ActionEvent that contains information regarding the event.
   */
  @FXML
  public void onHideMessage(ActionEvent event) {
    int selected = receivedMessages.getSelectionModel().getSelectedIndex();
    MailManager.getInstance().hideMail(MailManager.getInstance().getMail(selected).getUid());
    receivedMessages.getItems().remove(selected);
  }

  /**
   * Called when the user clicks the search user button on the find players tab.
   * @param event The ActionEvent that contains information regarding the event.
   */
  @FXML
  public void onSearchUser(ActionEvent event) {
    UserManager.getInstance().searchUsers(userSearchResult, nameFilterField.getText());
  }

  /**
   * Called when the user clicks add friend on a player from the find players tab.
   * @param event The ActionEvent that contains information regarding the event.
   */
  @FXML
  public void onAddFriend(ActionEvent event) {
    Object selectedItem = userSearchResult.getSelectionModel().getSelectedItem();
    if (selectedItem == null) return;

    String toAdd = selectedItem.toString();
    if (toAdd.isEmpty()) return;

    UserManager.getInstance().addFriend(toAdd);
  }

  /**
   * Called when the user clicks the share with game platform on the home tab.
   * @param event The ActionEvent that contains information regarding the event.
   */
  @FXML
  public void onShareWithPlatform(ActionEvent event) {
    ActivityFeedManager.getInstance().sendMessage(shareWithPlatformMessage.getText());
    shareWithPlatformMessage.clear();
  }

  /**
   * Prepares the platforms UI elements.
   */
  private void prepareUIElements() {
    ConnectionHelper connectionHelper = new ConnectionHelper();
    cityCountryLabel.setText(connectionHelper.fetchCity() + ", " + connectionHelper.fetchCountry());

    googleEmailAddressField.setText((String)settings.get("googleEmailAddress"));
    googleEmailPasswordField.setText((String)settings.get("googleEmailPassword"));

    shareWithPlatformMessage.setOnKeyPressed(event -> {
        String text = shareWithPlatformMessage.getText();

        if (text.length() > 100)
          shareWithPlatformMessage.setText(text.substring(0, 100));

        charactersLeftShare.setText(shareWithPlatformMessage.getText().length() + "/100");
    });
  }

  /**
   * Called when the new emails have been fetched from the server.
   * Adds the new maisl to the messages tab.
   * @param mails The emails that were recently fetched from te server.
   */
  private void updateOnIncoming(List<Mail> mails) {
    lastUpdatedMessage.setText("Last Updated: " + TimeHelper.getTimeStringNow());

    receivedMessages.getItems().clear();
    for (Mail mail : mails)
      receivedMessages.getItems().add(mail.getSubject());
  }

  /**
   * Called when the online friend list has been updated.
   * Updates the last updated text.
   * @param friends
   */
  private void updateOnFriendlist(List<String> friends) {
    homeLastUpdated.setText("Last Updated: " + TimeHelper.getTimeStringNow());
  }

  @Override
  public void notify(Event event, Object object) {
    switch (event) {
      case ON_INCOMING_MESSAGES_UPDATED:
        updateOnIncoming((List<Mail>) object);
        break;
      case ON_ONLINE_FRIENDLIST_UPDATED:
        updateOnFriendlist((List<String>) object);
        break;
      default:
        break;
    }
  }
}
